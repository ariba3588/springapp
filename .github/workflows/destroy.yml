name: Deploy to Azure Spring Apps Standard with Petclinic
on: workflow_dispatch

permissions:
  id-token: write
  contents: read

env:
  # === Deploy Firewall ===:
  DEPLOY_FIREWALL_STANDARD: false

  # === Destroy All ==
  DESTROY_STANDARD: true

  # === Baseline Parameters ====:
  REGION: eastus
  NAME_PREFIX: springlza
  ENVIRONMENT: dev

  # === Spring Apps Service ===:
  SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  JUMP_BOX_USERNAME: ltzadmin
  JUMP_BOX_PASSWORD: ${{ secrets.JUMP_BOX_PASSWORD }}
  
  # Specify the Object ID for the "Azure Spring Apps Resource Provider" service principal in the customer's Azure AD Tenant
  # Use this command to obtain:
  #    az ad sp show --id e8de9221-a19c-4c81-b814-fd37c6caf9d2 --query id --output tsv
  SPRINGAPPS_SPN_OBJECT_ID: ${{ vars.SPRINGAPPS_SPN_OBJECT_ID }}

  # === Pet Clinic Required Settings ===:
  MYSQL_ADMIN_USERNAME: mySqlAdmin
  MYSQL_ADMIN_PASSWORD: ${{ secrets.MYSQL_ADMIN_PASSWORD }}

  # ==== Terraform Backend ===:
  TFSTATE_RG: ${{ vars.TFSTATE_RG }}
  STORAGEACCOUNTNAME: ${{ vars.STORAGEACCOUNTNAME }}
  CONTAINERNAME: ${{ vars.CONTAINERNAME_STANDARD }}

  # ==== Terraform Azure Login ===:
  ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}


  # ==== APPS ====:
  API_GATEWAY: api-gateway
  ADMIN_SERVER: admin-server
  CUSTOMERS_SERVICE: customers-service
  VETS_SERVICE: vets-service
  VISITS_SERVICE: visits-service

  # ==== JARS ====:
  API_GATEWAY_JAR: spring-petclinic-api-gateway/target/spring-petclinic-api-gateway-3.0.1.jar
  ADMIN_SERVER_JAR: spring-petclinic-admin-server/target/spring-petclinic-admin-server-3.0.1.jar
  CUSTOMERS_SERVICE_JAR: spring-petclinic-customers-service/target/spring-petclinic-customers-service-3.0.1.jar
  VETS_SERVICE_JAR: spring-petclinic-vets-service/target/spring-petclinic-vets-service-3.0.1.jar
  VISITS_SERVICE_JAR: spring-petclinic-visits-service/target/spring-petclinic-visits-service-3.0.1.jar

jobs:
  conditions:
    runs-on: ubuntu-latest
    outputs:
      deploy_firewall: "${{ env.DEPLOY_FIREWALL_STANDARD }}"
      destroy: "${{ env.DESTROY_STANDARD }}"
      name_prefix: ${{ env.NAME_PREFIX}}
      environment: ${{ env.ENVIRONMENT}}
      region: ${{env.REGION}}
      jumpbox_username: ${{ env.JUMP_BOX_USERNAME}}
      mysql_admin_name: ${{env.MYSQL_ADMIN_USERNAME}}
    steps:
      - name: Deploy Firewall Override
        if: ${{vars.DEPLOY_FIREWALL_STANDARD != 0 }} 
        run: echo "DEPLOY_FIREWALL_STANDARD=${{ vars.DEPLOY_FIREWALL_STANDARD }}" >> $GITHUB_ENV
      - name: Destroy Override DESTROY_STANDARD
        if: ${{vars.DESTROY_STANDARD != 0 }} 
        run: echo "DESTROY_STANDARD=${{ vars.DESTROY_STANDARD }}" >> $GITHUB_ENV
      - name: Override Deployment Region
        if: ${{vars.REGION_STANDARD != 0 }} 
        run: echo "REGION=${{ vars.REGION_STANDARD }}" >> $GITHUB_ENV
      - name: Override Name Prefix
        if: ${{vars.NAME_PREFIX_STANDARD != 0 }} 
        run: echo "NAME_PREFIX=${{ vars.NAME_PREFIX_STANDARD }}" >> $GITHUB_ENV
      - name: Override Environment Token
        if: ${{vars.ENVIRONMENT_STANDARD != 0 }} 
        run: echo "ENVIRONMENT=${{ vars.ENVIRONMENT_STANDARD }}" >> $GITHUB_ENV
      - name: Override Jump Box Username
        if: ${{vars.JUMP_BOX_USERNAME != 0 }} 
        run: echo "JUMP_BOX_USERNAME=${{ vars.JUMP_BOX_USERNAME }}" >> $GITHUB_ENV
      - name: Override MySQl Admin Username
        if: ${{vars.MYSQL_ADMIN_USERNAME != 0 }} 
        run: echo "MYSQL_ADMIN_USERNAME=${{ vars.MYSQL_ADMIN_USERNAME }}" >> $GITHUB_ENV
 

  destroy_pet_clinic_infra:
    name: Destroy Pet Clinic Infrastructure
    runs-on: ubuntu-latest
    if: needs.conditions.outputs.destroy == 'true'
    env:
      NAME_PREFIX: ${{needs.conditions.outputs.name_prefix}}
      ENVIRONMENT: ${{needs.conditions.outputs.environment}}
      REGION: ${{ needs.conditions.outputs.region}}
      MYSQL_ADMIN_USERNAME: ${{needs.conditions.outputs.mysql_admin_name}}
    defaults:
      run:
        working-directory: Scenarios/sample-apps/petclinic/terraform
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_wrapper: false
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="resource_group_name=${{ env.TFSTATE_RG }}" \
          -backend-config="storage_account_name=${{ env.STORAGEACCOUNTNAME }}" \
          -backend-config="container_name=${{ env.CONTAINERNAME }}"
      - name: Terraform Plan
        run: |
          terraform plan -destroy -out my.plan \
          -var="spring_cloud_service=${{ needs.deploy_lz_standard.outputs.spring_apps_service_name }}" \
          -var="spring_cloud_resource_group_name=${{ needs.deploy_lz_standard.outputs.spring_apps_rg }}" \
          -var="subscription_id=${{ env.SUBSCRIPTION_ID}}" \
          -var="mysql_server_admin_password=${{ env.MYSQL_ADMIN_PASSWORD }}" \
          -var="mysql_server_admin_username=${{ env.MYSQL_ADMIN_USERNAME }}" \
          -var="resource_group=${{ needs.deploy_lz_network.outputs.spoke_rg }}" \
          -var="vnet_spoke_name=${{ needs.deploy_lz_network.outputs.spoke_vnet_name }}" \
          -var="private_zones_resource_group_name=${{ needs.deploy_lz_network.outputs.private_dns_rg }}" \
          -var="key_vault_rg=${{ needs.deploy_lz_shared.outputs.shared_rg }}" 
      - name: Terraform Apply
        run: terraform apply my.plan
  destroy_lz_standard:
    name: Destroy 06 LZ Spring Apps Standard
    runs-on: ubuntu-latest
    if: needs.conditions.outputs.destroy == 'true'
    env:
      NAME_PREFIX: ${{needs.conditions.outputs.name_prefix}}
      ENVIRONMENT: ${{needs.conditions.outputs.environment}}
      REGION: ${{ needs.conditions.outputs.region}}
      MYSQL_ADMIN_USERNAME: ${{needs.conditions.outputs.mysql_admin_name}}
    defaults:
      run:
        working-directory: Scenarios/ASA-Secure-Baseline/Terraform/06-LZ-SpringApps-Standard
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_wrapper: false
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="resource_group_name=${{ env.TFSTATE_RG }}" \
          -backend-config="storage_account_name=${{ env.STORAGEACCOUNTNAME }}" \
          -backend-config="container_name=${{ env.CONTAINERNAME }}"
      - name: Terraform Plan
        run: |
          terraform plan -destroy -out my.plan \
          -var="state_sa_rg=${{ env.TFSTATE_RG }}" \
          -var="state_sa_name=${{ env.STORAGEACCOUNTNAME }}" \
          -var="state_sa_container_name=${{ env.CONTAINERNAME }}" \
          -var="location=${{ env.REGION }}" \
          -var="name_prefix=${{ env.NAME_PREFIX }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="SPRINGAPPS_SPN_OBJECT_ID=${{ env.SPRINGAPPS_SPN_OBJECT_ID }}"
      - name: Terraform Apply
        run: terraform apply my.plan
  destroy_hub_firewall:
    name: Destroy 05 Hub Firewall
    runs-on: ubuntu-latest
    if: needs.conditions.outputs.destroy == 'true'
    env:
      NAME_PREFIX: ${{needs.conditions.outputs.name_prefix}}
      ENVIRONMENT: ${{needs.conditions.outputs.environment}}
      REGION: ${{ needs.conditions.outputs.region}}
      MYSQL_ADMIN_USERNAME: ${{needs.conditions.outputs.mysql_admin_name}}
    defaults:
      run:
        working-directory: Scenarios/ASA-Secure-Baseline/Terraform/05-Hub-AzureFirewall
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_wrapper: false
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="resource_group_name=${{ env.TFSTATE_RG }}" \
          -backend-config="storage_account_name=${{ env.STORAGEACCOUNTNAME }}" \
          -backend-config="container_name=${{ env.CONTAINERNAME }}"
      - name: Terraform Plan
        run: |
          terraform plan -destroy -out my.plan \
          -var="state_sa_rg=${{ env.TFSTATE_RG }}" \
          -var="state_sa_name=${{ env.STORAGEACCOUNTNAME }}" \
          -var="state_sa_container_name=${{ env.CONTAINERNAME }}" \
          -var="location=${{ env.REGION }}" \
          -var="name_prefix=${{ env.NAME_PREFIX }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="SPRINGAPPS_SPN_OBJECT_ID=${{ env.SPRINGAPPS_SPN_OBJECT_ID }}"
      - name: Terraform Apply
        run: terraform apply my.plan
  destroy_lz_shared:
    needs: [ conditions]
    name: Destroy 04 LZ Shared Resources
    runs-on: ubuntu-latest
    if: needs.conditions.outputs.destroy == 'true'
    env:
      NAME_PREFIX: ${{needs.conditions.outputs.name_prefix}}
      ENVIRONMENT: ${{needs.conditions.outputs.environment}}
      REGION: ${{ needs.conditions.outputs.region}}
      JUMP_BOX_USERNAME: ${{needs.conditions.outputs.jumpbox_username}}
    defaults:
      run:
        working-directory: Scenarios/ASA-Secure-Baseline/Terraform/04-LZ-SharedResources
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_wrapper: false
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="resource_group_name=${{ env.TFSTATE_RG }}" \
          -backend-config="storage_account_name=${{ env.STORAGEACCOUNTNAME }}" \
          -backend-config="container_name=${{ env.CONTAINERNAME }}"
      - name: Terraform Plan
        run: |
          terraform plan -destroy -out my.plan \
          -var="state_sa_rg=${{ env.TFSTATE_RG }}" \
          -var="state_sa_name=${{ env.STORAGEACCOUNTNAME }}" \
          -var="state_sa_container_name=${{ env.CONTAINERNAME }}" \
          -var="location=${{ env.REGION }}" \
          -var="name_prefix=${{ env.NAME_PREFIX }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="SPRINGAPPS_SPN_OBJECT_ID=${{ env.SPRINGAPPS_SPN_OBJECT_ID }}" \
          -var="jump_host_admin_username=${{ env.JUMP_BOX_USERNAME }}" \
          -var="jump_host_password=${{ env.JUMP_BOX_PASSWORD}}"
      - name: Terraform Apply
        run: terraform apply my.plan
  destroy_lz_network:
    needs: [destroy_lz_shared, conditions]
    name: Destroy 03 LZ Network
    runs-on: ubuntu-latest
    if: needs.conditions.outputs.destroy == 'true'
    env:
      NAME_PREFIX: ${{needs.conditions.outputs.name_prefix}}
      ENVIRONMENT: ${{needs.conditions.outputs.environment}}
      REGION: ${{ needs.conditions.outputs.region}}
    defaults:
      run:
        working-directory: Scenarios/ASA-Secure-Baseline/Terraform/03-LZ-Network
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_wrapper: false
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="resource_group_name=${{ env.TFSTATE_RG }}" \
          -backend-config="storage_account_name=${{ env.STORAGEACCOUNTNAME }}" \
          -backend-config="container_name=${{ env.CONTAINERNAME }}"
      - name: Terraform Plan
        run: |
          terraform plan -destroy -out my.plan \
          -var="state_sa_rg=${{ env.TFSTATE_RG }}" \
          -var="state_sa_name=${{ env.STORAGEACCOUNTNAME }}" \
          -var="state_sa_container_name=${{ env.CONTAINERNAME }}" \
          -var="location=${{ env.REGION }}" \
          -var="name_prefix=${{ env.NAME_PREFIX }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="SPRINGAPPS_SPN_OBJECT_ID=${{ env.SPRINGAPPS_SPN_OBJECT_ID }}"
      - name: Terraform Apply
        run: terraform apply my.plan
  destroy_hub_network:
    name: Destroy 02 Hub Network
    needs: [destroy_lz_network, conditions]
    runs-on: ubuntu-latest
    if: needs.conditions.outputs.destroy == 'true'
    env:
      NAME_PREFIX: ${{needs.conditions.outputs.name_prefix}}
      ENVIRONMENT: ${{needs.conditions.outputs.environment}}
      REGION: ${{ needs.conditions.outputs.region}}
    defaults:
      run:
        working-directory: Scenarios/ASA-Secure-Baseline/Terraform/02-Hub-Network
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_wrapper: false
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="resource_group_name=${{ env.TFSTATE_RG }}" \
          -backend-config="storage_account_name=${{ env.STORAGEACCOUNTNAME }}" \
          -backend-config="container_name=${{ env.CONTAINERNAME }}"
      - name: Terraform Plan
        run: |
          terraform plan -destroy -out my.plan \
          -var="state_sa_rg=${{ env.TFSTATE_RG }}" \
          -var="state_sa_name=${{ env.STORAGEACCOUNTNAME }}" \
          -var="state_sa_container_name=${{ env.CONTAINERNAME }}" \
          -var="location=${{ env.REGION }}" \
          -var="name_prefix=${{ env.NAME_PREFIX }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="SPRINGAPPS_SPN_OBJECT_ID=${{ env.SPRINGAPPS_SPN_OBJECT_ID }}"
      - name: Terraform Apply
        run: terraform apply my.plan
